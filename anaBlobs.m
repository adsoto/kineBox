function varargout = anaBlobs(vid_path,v,opType,varargin)
% Analyze blobs that may be extracted from a video
% B = anaBlobs(vid_path,v,opType)
%  B - structure of blob data
%  vid_path - path to video file or image sequence
%  v - structure of info about video (generated by defineVidObject)
%  opType - designates the type of operation ('G&L props')
%
% B = anaBlobs(vid_path,v,'G&L props',im_seq,fr_num,Centroid,...
%       Rotation,blobParam,tVal)
% Finds the global and local parameters for blobs
%   im_seq - 3D sequence if images in the roi
%   fr_num - sequence of frame numbers to be included in mean image
%   Centroid - struction denoting the center of the roi (generated by tracker)
%   Rotation - rotation structure generated by tracker
%   blobParam - Structure of blob parameters
%   imInvert - logical that indicates whether to invert images
%
% % B = anaBlobs(vid_path,v,'filter motion',B,winLen,Centroid,...
%       Rotation,blobParam,tVal)
%   tVal - threshold value for blobs
%
% Developed by McHenryLab at UC Irvine


%% Parse inputs

if strcmp(opType,'G&L props')
    
    % Frame numbers
    if nargin>4
        if length(varargin{1})>1
            fr_num = varargin{2};
        else
            % Max number of frames to analyze
            maxFrames = varargin{1};
            fr_num = [];
        end
    else
        maxFrames = 100;
        fr_num = [];
    end

    % Extract inputs
    im_seq    = varargin{1};
    Centroid  = varargin{3};
    Rotation  = varargin{4};
    blobParam = varargin{5};
    imInvert  = varargin{6};
    
    % Check data
    if size(im_seq,3)~=length(fr_num)
        error('Frame numbers have a different length than the number of images')
    end
    
elseif strcmp(opType,'filter motion')
    
    % Extract inputs
    B         = varargin{1};
    winLen    = varargin{2};
    Centroid  = varargin{3};
    Rotation  = varargin{4};
    blobParam = varargin{5};
    tVal      = varargin{6};
    
else
    error('opType not recognized');
end


%% Loop thru frames ('G&L props')

if strcmp(opType,'G&L props')
    
    % Loop thru frames
    for i = 1:length(fr_num)
        
        % Current frame
        cFrame = fr_num(i);
        
        % Index for current frame in the data
        iFrame = find(Centroid.frames==cFrame);
        
        % Current parameters
        x = Centroid.x_pix(iFrame);
        y = Centroid.y_pix(iFrame);
        r = Centroid.r_pix;
        tform = Rotation(iFrame).tform_roi;
        theta = Centroid.theta;
        
        % Current whole frame
        im = getFrame(vid_path,v,cFrame,imInvert,'gray');

        % Get roi image
        cIm = im_seq(:,:,i);
        
        % Find blobs in roi
        [props,bw_roi,areas,xB,yB] = findBlobs(cIm,blobParam.tVal,...
            'area',blobParam.areaMin,blobParam.areaMax);
        
        % Get roi data
        [bw_mask,im_roi,roi_rect,bw_roi_mask] = giveROI('circular',im,x,y,r,theta,0);
        
        % Blobs in the G FOR
        bw_blobs_G = transCoord2d('bw L2G',tform,bw_roi,bw_mask,bw_roi_mask);
        
        % Survey blobs
        propsG = regionprops(bw_blobs_G,'Centroid','Area',...
            'MajorAxisLength','MinorAxisLength',...
            'PixelIdxList','PixelList');
        
        % Store blob data
        B(i).fr_num = cFrame;
        B(i).frIdx  = iFrame;
        B(i).propsG = propsG;
        B(i).propsL = props;
        
        if 0
            % Current whole frame
            imI = getFrame(vid_path,v,cFrame,~imInvert,'gray');
            
            h = imshow(imI,'InitialMag','fit');
            hold on
            
            % Make a truecolor all-green image, make non-blobs invisible
            green = cat(3, zeros(size(im)), ones(size(im)), zeros(size(im)));
            h = imshow(green,'InitialMag','fit');
            set(h, 'AlphaData', bw_blobs_G)
            
            title(['Frame ' num2str(fr_num(i))]);
            
            pause(0.001)
            
        else
            disp(['anaBlobs (' opType ') : '  num2str(i) ' of ' num2str(length(fr_num))]);
        end
        
        clear props propsG bw_mask im_roi roi_rect bw_roi_mask bw_roi
        clear areas xB yB
    end   
end


%% Loop thru frames ('filter motion')

if strcmp(opType,'filter motion')
        
    Bin = B;
    clear B
    
    % Half interval to survey for analysis
    halfIntvl = floor(winLen/2);
    
    % Fill 
    for i = 1:halfIntvl-1
        B(i).fr_num = Bin(i).fr_num;
        B(i).frIdx  = Bin(i).frIdx;
        B(i).propsG = nan;
        B(i).propsL = nan;
    end
    
    for i = halfIntvl:(length(Bin)-halfIntvl)
        
        % Current frame
        cFrame = Bin(i).fr_num;
        
        % Index for current frame in the data
        iFrame = Bin(i).frIdx;
        
        % Current parameters
        x = Centroid.x(iFrame);
        y = Centroid.y(iFrame);
        r = Centroid.r_pix;
        tform = Rotation(iFrame).tform_roi;
        theta = Centroid.theta;
        
        % Current whole frame
        %im = getFrame(vid_path,v,cFrame,imInvert,'gray');
        
        % Window of frames to analyze
        startFrame = max([1 i-halfIntvl]);
        endFrame = min([length(Rotation) i+halfIntvl]);       
        winFrames = startFrame:endFrame;
        
        % Produce image that highlights static elements
        imB = motionImage(vid_path,v,'bw static',winFrames,Bin);

        %tVal = imInteract(imcomplement(imStackScore),'threshold');
        %tVal = 0.5871;
        
        bwNew = im2bw(imB,tVal);
        
        % Fill holes
        bwNew = imfill(bwNew,'holes');
        
         % Survey blobs
        propsG = regionprops(bwNew,'Centroid','Area',...
            'MajorAxisLength','MinorAxisLength',...
            'PixelIdxList','PixelList');
        
        % Get roi data
        [bw_mask,im_roi,roi_rect,bw_roi_mask] = giveROI('circular',imB,x,y,r,theta,0);
        
        % Find blobs in roi
        [props,bw_roi,areas,xB,yB] = findBlobs(im_roi,blobParam.tVal,...
                         'area',blobParam.areaMin,blobParam.areaMax);
        
        % Store blob data
        B(i).fr_num = cFrame;
        B(i).frIdx  = iFrame;
        B(i).propsG = propsG;
        
%         % Loop thru window of images
%         for j = 1:length(winFrames)
%             
%             % Current frame
%             iFrame = winFrames(j);
%             
%             % Start with blank
%             currIm  = logical(zeros(size(im)));
%             
%             % Score pixels with blobs
%             for k = 1:length(B(iFrame).propsG),
%                 currIm(B(iFrame).propsG(k).PixelIdxList) = 1;
%             end
%             
%             % Store resulting image
%             bwStack(:,:,j) = currIm;
%         end
        disp(' ')
        disp(['anaBlobs (' opType ') : done ' num2str(i) ' of ' ...
              num2str((length(Bin)-halfIntvl))])
        disp(' ');
    end
    
        
end

%% Outputs

varargout{1} = B;




