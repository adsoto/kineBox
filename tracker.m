function varargout = tracker(vid_path,v,imInvert,method,varargin)
% Tracks the motion of an object in a video sequence
% tracker(vid_path,v,method)
%   vid_path - path to video file or image sequence
%   v - structure of info about video (generated by defineVidObject)
%   imInvert - logical that indicates whether to invert the images
%   method - type of tracking approach ('threshold translation' or 'body
%   rotation')
%
% Centroid = tracker(vid_path,v,'threshold translation',roi0,tVal,frames,imMean) 
% returns just centroid cooridinates
%   roi0 - Initial region-of-interest structure (generated by giveROI('define'))
%   tVal - threshold value
%   frames - listing of frame numbers to analyze (default: all of them)



%roiScale,imInvert,visTracking,frames,Centroid,Rotation,makeVid
%  roiScale - Factor by which the blob diameter gets multiplied for roi
%  imInvert - choose 0 for light on dark field, 1 for dark on light field
%  visTracking - Logical to visualize the tracking
%  frames - listing of frame numbers to analyze
%  Centroid - structure with fields x_pix, y_pix, & r_pix for roi coord & radius
%

%
% Developed by McHenryLab at UC Irvine


%TODO: Update rotation code


%% Parse inputs

if strcmp(method,'threshold translation')
    
    roi0   = varargin{1};
    tVal   = varargin{2};
    
    % Frame numbers to analyze
    if nargin<7 || isempty(varargin{3})  
        frames = [v.UserData.FirstFrame:v.UserData.LastFrame]';
    else
        frames = varargin{3};
    end
    
    % Mean image
    if nargin<8
        imMean = [];
    else
        imMean = varargin{4};
    end
    
elseif strcmp(method,'body rotation')

    roi0       = varargin{1};
    Centroid   = varargin{2};
    
    % Frame numbers to analyze
    if nargin<7 || isempty(varargin{3})  
        frames = v.UserData.FirstFrame:v.UserData.LastFrame;
    else
        frames = varargin{3};
    end
    
    % Mean image
    if nargin<8
        imMean = [];
    else
        imMean = varargin{4};
    end
    
    
elseif strcmp(method,'threshold roi')

    roi0   = varargin{1};
    tVal   = varargin{2};
    
    % Frame numbers to analyze
    if nargin<7 || isempty(varargin{3})  
        frames = [v.UserData.FirstFrame:v.UserData.LastFrame]';
    else
        frames = varargin{3};
    end
    
    % Mean image
    if nargin<8
        imMean = [];
    else
        imMean = varargin{4};
    end

% If no match on method
else
    error('requested method not recognized');
    
end


%% Parameter defaults

% If threshold method . . .
if strcmp(method,'threshold translation') || strcmp(method,'threshold roi') 

    % Define frames
    Centroid.frames = frames;   
    Centroid.x      = nan(length(frames),1);
    Centroid.y      = nan(length(frames),1);
    Centroid.y_flip = nan(length(frames),1);
    
    % Initial central coordinates
    cX = roi0.xCntr;
    cY = roi0.yCntr;
    
% If body rotation . . .
elseif strcmp(method,'body rotation')
    
    % Downsample images for image registration
    dSample = 1;
    
    % Initialize image registration parameters
    [optimizer, metric]  = imregconfig('monomodal');
    optimizer.MaximumStepLength = 5e-4;
    optimizer.MaximumIterations = 1500;
    optimizer.RelaxationFactor  = 0.2;
    
    % First image
    im0 = getFrame(vid_path,v,frames(1),imInvert,'gray',imMean);
    
    % Focus on roi
    %[im0,roi_mask,roi_rect] = isolate_roi(im0,Centroid.x_pix(1),Centroid.y_pix(1),Centroid.r_pix,theta);
    [im_roi0,bw_mask] = giveROI('unstabilized',im0,roi0,dSample);
   
    % Set starting roi structure
   % roi = roi0;
end


%% Tracking object

% Loop thru frames
for i = 1:length(frames)
    
    % Current frame
    cFrame = frames(i);
    
    % Current image
    im = getFrame(vid_path,v,cFrame,imInvert,'gray',imMean);
    
    % Threshold method: find centroid coordinates
    if strcmp(method,'threshold translation')
        
        % Find blob at cX,cY
        [props,bwOut] = findBlobs(im,tVal,'coord',cX,cY);

        % Store results
        Centroid.x(i,1) = props.Centroid(1);
        Centroid.y(i,1) = props.Centroid(2);
        Centroid.y_flip(i,1) = size(im,1)-props.Centroid(2);
        
        % Update current coordinates
        cX = props.Centroid(1);
        cY = props.Centroid(2);
        
        % Clear for next loop
        clear tmp_x tmp_y
        
        
    % Threshold method: find centroid coordinates
    elseif strcmp(method,'threshold roi')
        
        %TODO: Change this code to handle just the roi
        
        % Find blob at cX,cY
        [props,bwOut] = findBlobs(im,tVal,'coord',cX,cY);

        % Store results
        Centroid.x(i,1) = props.Centroid(1);
        Centroid.y(i,1) = props.Centroid(2);
        Centroid.y_flip(i,1) = size(im,1)-props.Centroid(2);
        
        % Update current coordinates
        cX = props.Centroid(1);
        cY = props.Centroid(2);
        
        % Clear for next loop
        clear tmp_x tmp_y
        
    % body rotation method: 
    elseif strcmp(method,'body rotation')
        
%         % Find rotation matrix
%         tform = findRot(im,im0,Centroid.x_pix(i),Centroid.y_pix(i),...
%                         Centroid.r_pix,theta,optimizer,metric);
        numroipts = length(roi0.theta);
        
        roi = giveROI('define','circular',numroipts,roi0.r,...
                      Centroid.x(i),Centroid.y(i));
                  
         % Give image, unstabilized (i.e. unrotated)
         [im_roi,bw_mask] = giveROI('unstabilized',im,roi,dSample);
         
         % Focus on roi
%         [im_roi,imMask,roi_rect] = isolate_roi(im,Centroid.x_pix(i),...
%             Centroid.y_pix(i),Centroid.r_pix,theta);

         % Transformation object to stablize head wrt im0
         tform = imregtform(im_roi,im_roi0,'rigid',optimizer,metric);

%          % Include rotation in plotting
%          includeRot = 1;

        % Store results
        Rotation(i).tform_roi = tform;
       % Rotation(i).roi_rect = roi_rect;
         
        % Clear for next iteration
        clear im_roi tform_roi imStable xC yC h imMask im_roi
    end
    
    % Update status
    disp(['tracker (' method ') : done ' num2str(i) ' of ' num2str(length(frames))])   
    
%     % Visualize: 
%     if 0 
%         
%         % Title text
%         t_txt = ['Frame ' num2str(cFrame) '/' num2str(frames(end))];
%             
%         % If rotation data included . . .
%         if includeRot
%             visTrack(im,Centroid.x_pix(i),Centroid.y_pix(i),Centroid.r_pix,theta,...
%                 Rotation(i).tform_roi,t_txt);
%             
%         % If no rotation
%         else
% 
%             % Visualization code
%             visTrack(im,Centroid.x_pix(i),Centroid.y_pix(i),Centroid.r_pix,...
%                 theta,[],t_txt);
%         end
%         
%         % Log frame
%         if makeVid
%             M(i) = getframe(gcf);
%         end
%         
%         % Pause briefly to render
%         pause(0.001)
%     end

end


%% Define outputs

% Threshold method
if strcmp(method,'threshold translation') || strcmp(method,'threshold roi') 
    
        varargout{1} = Centroid;
            
% Body rotation method    
elseif strcmp(method,'body rotation')
    
    varargout{1} = Rotation;
    
elseif strcmp(method,'visualize') 
    
    if makeVid
        varargout{1} = M;
    else
        varargout{1} = fig;
    end
end

% % Report status
% if ~visTracking
%     disp(' ')
%     disp([method ' complete!'])
% end


% 
% function visTrack(im,x,y,r,theta,tform,t_txt)
% 
% % Do not downsample the roi image:
% dSample = 0;
% 
% % If rotation included . . 
% if nargin>5 && ~isempty(tform)
%     % Focus on roi
%     [bw_mask,im_roi,roi_rect,bw_roi,imStable] = giveROI('circular',im,x,y,r,theta,...
%         dSample,tform);
%   
%     subplot(1,2,2)
%     imshow(imStable,'InitialMagnification','fit');
%     
%     % Set up for main plot
%     subplot(1,2,1)
% end
% 
% % Circular coordinates for new roi
% xC    = r.*cos(theta) + x;
% yC    = r.*sin(theta) + y;
% 
% imshow(im,'InitialMagnification','fit');
% hold on
% h = line(xC,yC,'Color',[1 0 0 0.2],'LineWidth',3);
% title(t_txt)
% plot(x,y,'r+')
% hold off




