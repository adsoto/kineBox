function varargout = aniData(vid_path,v,data_path,movie_file,imInvert,opType,varargin)
% Animates blobs that may be extracted from a video
% M = anaBlobs(vid_path,v,imInvert,display,opType)
%  M - movie object
%  vid_path - path to video file or image sequence
%  v - structure of info about video (generated by defineVidObject)
%  opType - designates the type of operation ('blobs G&L')
%  imInvert - logical that designates whether to invert the image
%
% M = anaBlobs(vid_path,v,'blobs G&L',B,imVis)
% Overlays blob data onto video frames in local and global FOR
%   B - Blob data structure (created by anaBlobs)
%   imVis - logical indicating whether to display frames as they are put
%   together.
%
% M = anaBlobs(vid_path,v,'Centroid & Rotation',S,imVis)
%    S - structure that defines coordinate transformation bwtn roi and
%    frame for whole movie (created by defineSystem2d)

%% Parameters

alphaLevel = 0.75;
vidQuality = 50;


% Set up output video file
vOut = VideoWriter([data_path filesep movie_file '.mp4'],'MPEG-4');
vOut.Quality = 50;

open(vOut)

% Blob colors
clrs{1} = [241 90 36]./255;
clrs{2} = [41 171 226]./255;
clrs{3} = [0 1 0];


%% Parse inputs

if strcmp(opType,'blobs G&L')
    
    % Blob data structure
    B = varargin{1};
      
      j = 1;
    for i = 1:length(B)
        if ~isempty(B(i).fr_num)
            frames(j,1) = B(i).fr_num;
            j = j + 1;
        end
    end
    
    if nargin > 5
        imVis = varargin{2};
    else
        imVis = 1;
    end
    
elseif strcmp(opType,'blobs L simple')
   
    S          = varargin{1};
    tVal       = varargin{2};
    areaMin    = varargin{3};
    areaMax    = varargin{4};
    imVis      = varargin{5};
    imRoiMean  = varargin{6};
    dSample    = varargin{7};
    
    frames = S.frames;      
    
elseif strcmp(opType,'Centroid tracking')
       
    S       = varargin{1};
   
    frames = S.frames;    
    numroipts = length(S.roi(1).theta);
    
    if nargin > 5
        imVis = varargin{2};
    else
        imVis = 1;
    end
    
elseif strcmp(opType,'center')
       
    Body           = varargin{1};
    iC            = varargin{2};
      
    if length(varargin)>2
        imVis = varargin{3};
    else
        imVis = 1;
    end
    
    if length(varargin)>3
        bLevel = varargin{4};
    else
        bLevel = 0.2;
    end
    
    
    idx = ~isnan(Body.x(:,1)) | ~isnan(Body.x(:,2));
    frames = Body.frames(idx);
    numroipts = 400;
 
elseif strcmp(opType,'Pred + prey')
    
    % Parse inputs
    S_py   = varargin{1};
    S_pd   = varargin{2};
    L      = varargin{3};
    imVis  = varargin{4};

    numroipts = 400;
    frames = S_pd.frames;    
    
elseif strcmp(opType,'Pred-prey cent track')
    
    % Parse inputs
    C_pd   = varargin{1};
    C_py   = varargin{2};
    r_pd   = varargin{3};
    r_py   = varargin{4};
    imVis  = varargin{5};

    numroipts = 400;
    frames = C_pd.frames;    
    
elseif strcmp(opType,'Centroid & Rotation')
       
    S = varargin{1}; 
    frames = S.frames;    
    numroipts = length(S.roi(1).xPerimL);    
    if nargin > 5
        imVis = varargin{2};
    else
        imVis = 1;
    end
    
elseif strcmp(opType,'Body')
       
%     % Load body data (Body)
%     load([data_path filesep data_file])
%     
%      % Load initial conditions (iC)
%     load([data_path filesep 'Initial conditions'])
    
    % Data 
    Body = varargin{1}; 
     
%     frames = Body.frames;    
%     numroipts = length(S.roi(1).xPerimL);    
    if length(varargin) > 1
        imVis = varargin{2};
    else
        imVis = 1;
    end
    
    % Vector of (non-nan) frames
    frames = Body.frames(~isnan(Body.x));
    
elseif strcmp(opType,'Body arm')

    % Data 
    Body = varargin{1}; 

    if length(varargin) > 1
        imVis = varargin{2};
    else
        imVis = 1;
    end
    
    iC = varargin{3};
    
    
    % Vector of (non-nan) frames
    frames = Body.frames(~isnan(Body.x));  
       
elseif strcmp(opType,'Body pred prey')
       
    
    % Data 
    bodPy = varargin{1}; 
    bodPd = varargin{2}; 
    iC    = varargin{3}; 
     
%     frames = Body.frames;    
%     numroipts = length(S.roi(1).xPerimL);    
    if length(varargin) > 1
        imVis = varargin{4};
    else
        imVis = 1;
    end
    
    % Vector of (non-nan) frames
    frames = bodPd.frames(~isnan(bodPd.x));
    
    L.ang_pd = 0;
    L.ang_py = 0;
end


%% Initialize things

% Make figure
f = figure;

if ~imVis
    set(f,'Visible','off')
end

if nargout>0
    % Initialize index
    idx = 1;
end


%% loop thru frames (not 'blobs G&L')

if ~strcmp(opType,'blobs G&L')
    
    % Loop thru data
    for i = 1:length(frames)
        
        % Current whole frame
        im = getFrame(vid_path,v,frames(i),imInvert,'gray');
        
        if strcmp(opType,'blobs L simple')
            % Roi image, mean image subtracted
            im = giveROI('stabilized',im,S.roi(i),dSample, ...
                S.tform(:,:,i),imRoiMean);
        end
        
        if strcmp(opType,'Centroid & Rotation') || ...
                strcmp(opType,'Body') 
            subplot(1,2,1)
            
        elseif strcmp(opType,'Body arm')
            subplot(2,2,[1 3])
            
        elseif strcmp(opType,'Pred + prey') || strcmp(opType,'Body pred prey')
            subplot(4,2,[1:4])
        end
        
        % Display frame
        h = imshow(im,'InitialMag','fit');
        hold on
        title(['Frame ' num2str(frames(i))]);
        
        if strcmp(opType,'blobs G&L')
            
            if 1%~isnan(B(i).propsL)
                
                % Start with blank
                bwG  = logical(zeros(size(im)));
                
                % Score pixels with blobs
                for k = 1:length(B(i).propsG),
                    bwG(B(i).propsG(k).PixelIdxList) = 1;
                end
                
                % Make a truecolor all-green image, make non-blobs invisible
                green = cat(3, zeros(size(im)), ones(size(im)), zeros(size(im)));
                h = imshow(green,'InitialMag','fit');
                set(h, 'AlphaData', bwG.*alphaLevel)
            end
            
        elseif strcmp(opType,'center')    
            
            % Index for current frame
            iFrame = find(Body.frames==frames(i),1,'first');
            
            % Loop thru pred & prey
            for iMode = 1:size(Body.x,2)    

                % If there are points . . .
                if ~isnan(Body.x(iFrame,iMode))
                    
                       % Define current roi
                       roiCurr = giveROI('define','circular',numroipts,iC.r(iMode),...
                                  Body.x(iFrame,iMode),Body.y(iFrame,iMode));
                       % Render roi
                       line(roiCurr.xPerimG,roiCurr.yPerimG,'Color',...
                            [clrs{iMode} 0.5],'LineWidth',2);
                end
                
                % If there is a blob . . 
                if isfield(Body,'props') && ...
                   isfield(Body.props(iFrame,iMode),'PixelIdxList') && ...
                   ~isempty(Body.props(iFrame,iMode).PixelIdxList) && ...
                   ~isnan(Body.props(iFrame,iMode).PixelIdxList(1)) 
                    
                    % Start with black image
                    bw = im2bw(im).*0~=0;
                    
                     % Add white pixels for current blob
                    bw(Body.props(iFrame,iMode).PixelIdxList) = 1;
                    
                    % Make a truecolor all-green image, make non-blobs invisible
                    blob = cat(3, clrs{iMode}(1).*ones(size(im)), ...
                                  clrs{iMode}(2).*ones(size(im)), ...
                                  clrs{iMode}(3).*ones(size(im)));
                    h = imshow(blob,'InitialMag','fit');
                    set(h, 'AlphaData', bw)                  
                end
            end
            
            brighten(bLevel)
            
        elseif strcmp(opType,'blobs L simple')
            
            % Overlay blobs
            [props,bw,areas,xB,yB] = findBlobs(im,tVal,'area',areaMin,areaMax);
            
            % Make a truecolor all-green image, make non-blobs invisible
            green = cat(3, zeros(size(im)), ones(size(im)), zeros(size(im)));
            h = imshow(green,'InitialMag','fit');
            set(h, 'AlphaData', bw)
            
            clear props bw areas xB yB
         
            
        elseif strcmp(opType,'Centroid tracking') || strcmp(opType,'Centroid & Rotation')
            
            % roi in global frame
            xG = S.roi(i).xPerimG;
            yG = S.roi(i).yPerimG;
            xC = S.roi(i).xCntr;
            yC = S.roi(i).yCntr;
            
            % Plot tracking
            h(1) = line(xG,yG,'Color',[0 1 0 0.2],'LineWidth',3);
            h(2) = plot(xC,yC,'g+');         
            
            
        elseif strcmp(opType,'Body')
            
            % Index for frame
            iFrame = find(frames(i)==Body.frames,1,'first');
            
            
            % Use roi from previous frame
            roi = giveROI('define','circular',400,iC.r,...
                          Body.x(iFrame),Body.y(iFrame));
            
            % Stabilized image         
            imStable =  giveROI('stabilized',im,roi,0,Body.rot_ang(iFrame));
            
            line(roi.xPerimG,roi.yPerimG,'Color',[1 0 0 0.2],'LineWidth',2);
            
            % Add title
            title(['Frame ' num2str(frames(i))])
            
            subplot(1,2,2)
            imshow(imStable,'InitialMag','fit')
            hold on
            %plot(roi.xPerimL,roi.yPerimL,'k-')
            line(roi.xPerimL,roi.yPerimL,'Color',[1 0 0 0.2],'LineWidth',4);
            hold off        
            brighten(-0.7)
            
            
       elseif strcmp(opType,'Body arm')
            
            % Index for frame
            iFrame = find(frames(i)==Body.frames,1,'first');
            
            % Use roi from previous frame
            roi = giveROI('define','circular',400,iC.r,...
                          Body.x(iFrame),Body.y(iFrame));
                      
            % Use roi from previous frame
            roiMouth = giveROI('define','circular',400,iC.rMouth,...
                          Body.x(iFrame),Body.y(iFrame));
            
            % Stabilized image         
            imStable =  giveROI('stabilized',im,roi,0,Body.ang(iFrame));
            mouthStable = giveROI('stabilized',im,roiMouth,0,Body.ang(iFrame));
            
            line(roi.xPerimG,roi.yPerimG,'Color',[1 0 0 0.2],'LineWidth',2);
            line(roiMouth.xPerimG,roiMouth.yPerimG,'Color',[1 0 0 0.2],'LineWidth',2);
            
            % Add title
            title(['Frame ' num2str(frames(i))])
            
            subplot(2,2,2)
            imshow(imStable,'InitialMag','fit')
            hold on
            %plot(roi.xPerimL,roi.yPerimL,'k-')
            line(roi.xPerimL,roi.yPerimL,'Color',[1 0 0 0.2],'LineWidth',4);
            hold off        
            brighten(-0.7)  
            
            subplot(2,2,4)
            imshow(mouthStable,'InitialMag','fit')
            hold on
            %plot(roi.xPerimL,roi.yPerimL,'k-')
            line(roiMouth.xPerimL,roiMouth.yPerimL,'Color',[1 0 0 0.2],'LineWidth',4);
            hold off        
            brighten(-0.2)            

            
       elseif strcmp(opType,'Body pred prey')
           
           % Index for frame
            iFrame = find(frames(i)==bodPd.frames,1,'first');
            
            set(f,'WindowStyle','normal')
            set(f,'Position',[1 1 881 692])
            
            % Colors
            pyClr = [41 171 226]./255;
            pdClr = [241 90 36]./255;
              
            angPd = -L.ang_pd + bodPd.ang(iFrame);
            angPy = -L.ang_py + bodPy.ang(iFrame);
            
            % Use roi from previous frame
            roiPd = giveROI('define','circular',400,iC.rPd,...
                bodPd.x(iFrame),bodPd.y(iFrame));
            roiPy = giveROI('define','circular',400,iC.rPy,...
                bodPy.x(iFrame),bodPy.y(iFrame));
            
%             thd = linspace(0,2*pi,400);
%             roiPd.x = (iC.rPd-1).*cos(thd)+iC.rPd+0.5;
%             roiPd.y = (iC.rPd-1).*sin(thd)+iC.rPd+0.5;
%             roiPy.x = (iC.rPy-1).*cos(thd)+iC.rPy+0.5;
%             roiPy.y = (iC.rPy-1).*sin(thd)+iC.rPy+0.5;
            
            
            
            % Current rois                
            imPd = giveROI('stabilized',im,roiPd,0,angPd);
            imPy = giveROI('stabilized',im,roiPy,0,angPy);
                 
            % roi of pred in global frame
            xGpd = roiPd.xPerimG;
            yGpd = roiPd.yPerimG;
            xCpd = [roiPd.xCntr roiPd.xCntr+iC.rPd*cosd(-angPd)];
            yCpd = [roiPd.yCntr roiPd.yCntr+iC.rPd*sind(-angPd)];
            
            % roi of prey in global frame
            xGpy = roiPy.xPerimG;
            yGpy = roiPy.yPerimG;
            xCpy = [roiPy.xCntr roiPy.xCntr+iC.rPy*cosd(-angPy)];
            yCpy = [roiPy.yCntr roiPy.yCntr+iC.rPy*sind(-angPy)];
            
            % Plot tracking
            h(1) = line(xGpd,yGpd,'Color',[pdClr 0.8],'LineWidth',2);
            h(2) = line(xCpd,yCpd,'Color',[pdClr 0.8],'LineWidth',1);
            h(3) = line(xGpy,yGpy,'Color',[pyClr 0.8],'LineWidth',1);
            h(4) = line(xCpy,yCpy,'Color',[pyClr 0.8],'LineWidth',0.5);
 
            subplot(4,2,[5 7])
            imshow(imPd,'InitialMag','fit');
            hold on
            line(bodPd.x(iFrame),bodPd.y(iFrame),...
                        'Color',[pdClr],'LineWidth',7);
            line([iC.rPd 2*iC.rPd],[iC.rPd iC.rPd],...
                        'Color',[pdClr 0.5],'LineWidth',2);      
            hold off
            
            subplot(4,2,[6 8])
            imshow(imPy,'InitialMag','fit');
            hold on
            line(bodPy.x(iFrame),bodPy.y(iFrame),...
                        'Color',[pyClr],'LineWidth',7);
            line([iC.rPy 2*iC.rPy],iC.rPy.*[1 1],...
                        'Color',[pyClr 0.5],'LineWidth',2);
            hold off
            
        elseif strcmp(opType,'Pred + prey')
            
            set(f,'WindowStyle','normal')
            set(f,'Position',[1 1 881 692])
            
            % Colors
            pyClr = [41 171 226]./255;
            pdClr = [241 90 36]./255;
            
            
            angPd = -L.ang_pd + S_pd.ang(i);
            angPy = -L.ang_py + S_py.ang(i);
            
            thd = linspace(0,2*pi,400);
            roiPd.x = (S_pd.roi(i).r-1).*cos(thd)+S_pd.roi(i).r+0.5;
            roiPd.y = (S_pd.roi(i).r-1).*sin(thd)+S_pd.roi(i).r+0.5;
            roiPy.x = (S_py.roi(i).r-1).*cos(thd)+S_py.roi(i).r+0.5;
            roiPy.y = (S_py.roi(i).r-1).*sin(thd)+S_py.roi(i).r+0.5;
            
            % Current rois                
            imPd = giveROI('stabilized',im,S_pd.roi(i),0,angPd);
            imPy = giveROI('stabilized',im,S_py.roi(i),0,angPy);
                 
            % roi of pred in global frame
            xGpd = S_pd.roi(i).xPerimG;
            yGpd = S_pd.roi(i).yPerimG;
            xCpd = [S_pd.roi(i).xCntr S_pd.roi(i).xCntr+S_pd.roi(i).r*cosd(-angPd)];
            yCpd = [S_pd.roi(i).yCntr S_pd.roi(i).yCntr+S_pd.roi(i).r*sind(-angPd)];
            
            % roi of prey in global frame
            xGpy = S_py.roi(i).xPerimG;
            yGpy = S_py.roi(i).yPerimG;
            xCpy = [S_py.roi(i).xCntr S_py.roi(i).xCntr+S_py.roi(i).r*cosd(-angPy)];
            yCpy = [S_py.roi(i).yCntr S_py.roi(i).yCntr+S_py.roi(i).r*sind(-angPy)];
            
            % Plot tracking
            h(1) = line(xGpd,yGpd,'Color',[pdClr 0.8],'LineWidth',2);
            h(2) = line(xCpd,yCpd,'Color',[pdClr 0.8],'LineWidth',1);
            h(3) = line(xGpy,yGpy,'Color',[pyClr 0.8],'LineWidth',1);
            h(4) = line(xCpy,yCpy,'Color',[pyClr 0.8],'LineWidth',0.5);
 
            subplot(4,2,[5 7])
            imshow(imPd,'InitialMag','fit');
            hold on
            line(roiPd.x,roiPd.y,...
                        'Color',[pdClr],'LineWidth',7);
            line([S_pd.roi(i).r 2*S_pd.roi(i).r],[S_pd.roi(i).r S_pd.roi(i).r],...
                        'Color',[pdClr 0.5],'LineWidth',2);      
            hold off
            
            subplot(4,2,[6 8])
            imshow(imPy,'InitialMag','fit');
            hold on
            line(roiPy.x,roiPy.y,...
                        'Color',[pyClr],'LineWidth',7);
            line([S_py.roi(i).r 2*S_py.roi(i).r],S_py.roi(i).r.*[1 1],...
                        'Color',[pyClr 0.5],'LineWidth',2);
            hold off
            
            
            
        elseif strcmp(opType,'Pred-prey cent track')
            
            % Current rois
            roiPd = giveROI('define','circular',numroipts,r_pd,...
                     C_pd.x(i),C_pd.y(i));
            roiPy = giveROI('define','circular',numroipts,r_py,...
                     C_py.x(i),C_py.y(i));
                 
            % Plot
            h(1) = line(roiPd.xPerimG,roiPd.yPerimG,'Color',[1 0 0 0.2],'LineWidth',3);
            h(2) = line(roiPy.xPerimG,roiPy.yPerimG,'Color',[0 0 1 0.2],'LineWidth',3);
            h(3) = plot(C_pd.x(i),C_pd.y(i),'r+');
            h(4) = plot(C_py.x(i),C_py.y(i),'b+');   
            
        end
        
        if strcmp(opType,'Centroid & Rotation')
            dSample = 0;
            
            if isfield(S,'ang')
                [im_roi,bw_mask] = giveROI('stabilized',im,S.roi(i),...
                    dSample,S.ang(i));
            else
                [im_roi,bw_mask] = giveROI('stabilized',im,S.roi(i),...
                    dSample,S.tform(:,:,i));
            end
            subplot(1,2,2)
            
            h = imshow(im_roi,'InitialMag','fit');
            
        end
 
        
        %if nargout>0
            % Capture frame
           % M(idx) = getframe(gcf);
            
            imFrame = getframe(gcf);
            % Advance index
            %idx = idx + 1;
            
            writeVideo(vOut,imFrame);
        %end
        
        if imVis
            pause(0.001);
        else
            disp(['aniData (' opType ') : ' num2str(i) ' of ' num2str(length(frames))])
        end
        
        hold off
    end
end



%% loop thru frames ('blobs G&L')

if strcmp(opType,'blobs G&L')
    
    % Loop thru data
    for i = 1:length(B)
        
        if isfield(B(i).propsG,'Area')
            % Current whole frame
            im = getFrame(vid_path,v,B(i).fr_num,imInvert,'gray');
            
            % Display frame
            h = imshow(im,'InitialMag','fit');
            hold on

            % Start with blank
            bwG  = logical(zeros(size(im)));
            
            % Score pixels with blobs
            for k = 1:length(B(i).propsG),
                bwG(B(i).propsG(k).PixelIdxList) = 1;
            end
            
            % Make a truecolor all-green image, make non-blobs invisible
            green = cat(3, zeros(size(im)), ones(size(im)), zeros(size(im)));
            h = imshow(green,'InitialMag','fit');
            set(h, 'AlphaData', bwG.*alphaLevel)
            
            title(['Frame ' num2str(frames(i))]);
            
            if nargout>0
                % Capture frame
                M(idx) = getframe(gcf);
                
                % Advance index
                idx = idx + 1;
            end
            
            if imVis
                pause(0.001);
            else
                disp(['aniData (' opType ') : ' num2str(i) ' of ' num2str(length(frames))])
            end
            
            hold off
        end
    end
end


%% Finish up

close(f)

% Output
%varargout{1} = M;
varargout{1} = [];

close(vOut)


% function visTrack(im,x,y,r,theta,tform,t_txt)
% 
% % Do not downsample the roi image:
% dSample = 0;
% 
% % If rotation included . . 
% if nargin>5 && ~isempty(tform)
%     % Focus on roi
%     [im_roi,bw_mask,roi_rect,bw_roi,imStable] = giveROI('circular',im,x,y,r,theta,...
%         dSample,tform);
%   
%     subplot(1,2,2)
%     imshow(imStable,'InitialMagnification','fit');
%     
%     % Set up for main plot
%     subplot(1,2,1)
% end
% 
% % Circular coordinates for new roi
% xC    = r.*cos(theta) + x;
% yC    = r.*sin(theta) + y;
% 
% imshow(im,'InitialMagnification','fit');
% hold on
% h = line(xC,yC,'Color',[1 0 0 0.2],'LineWidth',3);
% title(t_txt)
% plot(x,y,'r+')
% hold off
% 


