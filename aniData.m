function varargout = aniData(vid_path,v,imInvert,opType,varargin)
% Animates blobs that may be extracted from a video
% M = anaBlobs(vid_path,v,imInvert,display,opType)
%  M - movie object
%  vid_path - path to video file or image sequence
%  v - structure of info about video (generated by defineVidObject)
%  opType - designates the type of operation ('blobs G&L')
%  imInvert - logical that designates whether to invert the image
%
% M = anaBlobs(vid_path,v,'blobs G&L',B)
% Overlays blob data onto video frames in local and global FOR
%   B - Blob data structure (created by anaBlobs)


%% Parse inputs

if strcmp(opType,'blobs G&L')
    
    % Blob data structure
    B = varargin{1};
   
    
    for i = 1:length(B)
        frames(i,1) = B(i).frames;
    end
    
elseif strcmp(opType,'Centroid tracking')
       
    Centroid = varargin{1};
    roi0     = varargin{2};   
    frames = Centroid.frames;    
    numroipts = length(roi0.xG);
    
elseif strcmp(opType,'Centroid & Rotation')
       
    S = varargin{1}; 
    frames = S.frames;    
    numroipts = length(S.roi(1).xPerimL);    
    
end


%% Loop thru frames

% Make figure
f = figure;

if nargout>0
    % Initialize index
    idx = 1;
end

% Loop thru data
for i = 1:length(frames)
    
    % Current whole frame
    im = getFrame(vid_path,v,frames(i),imInvert,'gray');
    
    if strcmp(opType,'Centroid & Rotation')
        subplot(1,2,1)
    end
    
    % Display frame
    h = imshow(im,'InitialMag','fit');
    hold on
    
    if strcmp(opType,'blobs G&L')
        
        if ~isnan(B(i).propsL)
            
            % Start with blank
            bwB  = logical(zeros(size(im)));
            
            % Score pixels with blobs
            for k = 1:length(B(i).propsG),
                bwG(B(i).propsG(k).PixelIdxList) = 1;
            end
            
            % Make a truecolor all-green image, make non-blobs invisible
            green = cat(3, zeros(size(im)), ones(size(im)), zeros(size(im)));
            h = imshow(green,'InitialMag','fit');
            set(h, 'AlphaData', bw_blobs_G)
        end
        
    elseif strcmp(opType,'Centroid tracking') || strcmp(opType,'Centroid & Rotation')  
        
        % roi in global frame
        xG = S.roi(i).xPerimG;
        yG = S.roi(i).yPerimG;
        xC = S.roi(i).xCntr;
        yC = S.roi(i).yCntr;
        
        % Plot tracking
        h(1) = line(xG,yG,'Color',[0 1 0 0.2],'LineWidth',3);
        h(2) = plot(xC,yC,'g+');
 
    end
    
    if strcmp(opType,'Centroid & Rotation')
        dSample = 0;
        
        [bw_mask,im_roi] = giveROI('stabilized',im,S.roi(i),dSample,S.tform(:,:,i));
        
        subplot(1,2,2)
        
        h = imshow(im_roi,'InitialMag','fit');
        
    end
    
    
    title(['Frame ' num2str(frames(i))]);
    
    if nargout>0
        % Capture frame
        M(idx) = getframe(gcf);
        
        % Advance index
        idx = idx + 1;
    end
    
    pause(0.001);
    
    hold off
end

close(f)

% Output
varargout{1} = M;


function visTrack(im,x,y,r,theta,tform,t_txt)

% Do not downsample the roi image:
dSample = 0;

% If rotation included . . 
if nargin>5 && ~isempty(tform)
    % Focus on roi
    [bw_mask,im_roi,roi_rect,bw_roi,imStable] = giveROI('circular',im,x,y,r,theta,...
        dSample,tform);
  
    subplot(1,2,2)
    imshow(imStable,'InitialMagnification','fit');
    
    % Set up for main plot
    subplot(1,2,1)
end

% Circular coordinates for new roi
xC    = r.*cos(theta) + x;
yC    = r.*sin(theta) + y;

imshow(im,'InitialMagnification','fit');
hold on
h = line(xC,yC,'Color',[1 0 0 0.2],'LineWidth',3);
title(t_txt)
plot(x,y,'r+')
hold off



